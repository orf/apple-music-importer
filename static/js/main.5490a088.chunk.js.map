{"version":3,"sources":["Login.tsx","LibraryImport.tsx","LibraryDisplay.tsx","Searcher.ts","LibraryUpload.tsx","App.tsx","index.tsx"],"names":["Login","callback","Row","className","Button","onClick","size","variant","LibraryImport","foundTracks","searcher","useState","isImporting","setImporting","doneChunks","setDoneChunks","chunks","useMemo","chunk","useEffect","forEach","c","import","map","t","trackId","finally","s","progressDone","length","ProgressBar","now","label","toFixed","MusicKit","MusicKitInstance","LibraryDisplay","musicKitInstance","searchManager","setFoundTracks","notFoundTracks","setNotFoundTracks","isFinished","setIsFinished","startSearching","library","uniqueAlbumCovers","uniqBy","v","albumArt","Col","sm","span","offset","idx","Image","src","albumArtUrl","i","track","Name","Album","Artist","FoundTrack","this","replace","toString","NotFoundTrack","SearchManager","musicKit","searchSemaphore","addRateLimit","cache","Sema","RateLimit","timeUnit","uniformDistribution","ids","a","api","addToLibrary","songs","foundCallback","notFoundCallback","promises","search","then","trackResult","prev","Promise","all","LibraryId","acquire","token","searches","doSearch","result","release","searchString","apiResult","artwork","data","attributes","url","id","e","file","currentTarget","files","text","library_contents","parse","Object","values","Tracks","LibraryUpload","isLoading","setIsLoading","error","setError","setLibrary","manager","Spinner","animation","role","Alert","Heading","Form","Group","controlId","Control","type","onChange","handleUpload","catch","App","isAuthorized","signedIn","setSignedIn","authorize","r","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","configure","developerToken","app","name","icon","process","ReactDOM","render","StrictMode","Container","fluid","Navbar","color","fixed","Collapse","Nav","Link","target","href","document","getElementById"],"mappings":"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","file":"static/js/main.5490a088.chunk.js","sourcesContent":["import React from 'react'\n\nimport {Button, Row} from \"react-bootstrap\"\n\ninterface AppProps {\n  callback: () => void;\n}\n\n\nfunction Login({callback}: AppProps) {\n  return (\n    <Row>\n      <div className=\"px-4 py-5 my-5 text-center\">\n        <h1 className=\"display-5 fw-bold\">Apple Music Library.xml Importer</h1>\n        <div className=\"col-lg-6 mx-auto\">\n          <p className=\"lead mb-4\">\n            This is a web-based tool that imports a library.xml file exported from Apple Music back into your account.\n          </p>\n          <p className=\"lead mb-4\">\n            I built this because Apple Music deletes your entire library if you move country, and there isn't a simple\n            way to recover it.\n          </p>\n          <div className=\"d-grid gap-2 d-sm-flex justify-content-sm-center\">\n            <Button onClick={callback} size=\"lg\" variant=\"primary\">Login with Apple</Button>\n          </div>\n        </div>\n      </div>\n    </Row>\n  )\n}\n\nexport default Login\n","import SearchManager, {FoundTrack} from \"./Searcher\"\nimport {Button, ProgressBar} from \"react-bootstrap\"\nimport {useEffect, useMemo, useState} from \"react\"\nimport {chunk} from \"lodash\"\n\ninterface AppProps {\n  foundTracks: FoundTrack[],\n  searcher: SearchManager\n}\n\n\nfunction LibraryImport({foundTracks, searcher}: AppProps) {\n  const [isImporting, setImporting] = useState(false)\n  const [doneChunks, setDoneChunks] = useState(0)\n\n  const chunks = useMemo(() => chunk(foundTracks, 40), [foundTracks]);\n\n  useEffect(() => {\n    if (!isImporting) return\n\n    chunks.forEach((c) => {\n      searcher.import(c.map(t => t.trackId)).finally(() => {\n        setDoneChunks((s) => s + 1)\n      })\n    })\n\n  }, [searcher, isImporting, chunks])\n\n  const progressDone = (doneChunks / chunks.length) * 100\n\n  if (isImporting) {\n    return <div>\n      <ProgressBar now={progressDone} label={`Importing Songs: ${progressDone.toFixed(0)}%`}/>\n      <p>This may take a while, Apple Music has very low request limits</p>\n    </div>\n  } else {\n    return <Button variant=\"primary\" onClick={() => setImporting(true)}>Import My Library</Button>\n  }\n  // return <></>\n}\n\nexport default LibraryImport\n","import MusicKitInstance = MusicKit.MusicKitInstance\nimport {Col, Image, ProgressBar, Row} from \"react-bootstrap\"\nimport {FoundTrack, NotFoundTrack} from \"./Searcher\"\nimport SearchManager from \"./Searcher\"\nimport LibraryImport from \"./LibraryImport\"\nimport {useEffect, useMemo, useState} from \"react\"\nimport {uniqBy} from \"lodash\"\n\n\ninterface AppProps {\n  musicKitInstance: MusicKitInstance;\n  searchManager: SearchManager\n}\n\nfunction LibraryDisplay({musicKitInstance, searchManager}: AppProps) {\n  const [foundTracks, setFoundTracks] = useState<FoundTrack[]>([])\n  const [notFoundTracks, setNotFoundTracks] = useState<NotFoundTrack[]>([])\n  const [isFinished, setIsFinished] = useState(false)\n\n  useEffect(() => {\n    searchManager.startSearching(setFoundTracks, setNotFoundTracks).finally(() => setIsFinished(true))\n  }, [searchManager, setNotFoundTracks, setFoundTracks])\n\n  const totalFound = foundTracks.length + notFoundTracks.length\n  const progressDone = (totalFound / searchManager.library.length) * 100\n\n  const uniqueAlbumCovers = useMemo(() => uniqBy(foundTracks, (v) => v.albumArt), [foundTracks])\n\n  return <div>\n    <Row>\n      <Col className=\"d-flex flex-column justify-content-center align-items-center\">\n        <h3>{searchManager.library.length} tracks in your library</h3>\n      </Col>\n    </Row>\n    <Row>\n      <Col sm={{span: 6, offset: 3}} className=\"d-flex flex-column justify-content-center\">\n        {isFinished\n          ? <LibraryImport foundTracks={foundTracks} searcher={searchManager}/>\n          : <ProgressBar now={progressDone} label={`${progressDone.toFixed(0)}%`}/>\n        }\n      </Col>\n    </Row>\n    <br/>\n    <Row>\n      <Col sm={{span: 8}}>\n        <Row>\n          <Col className=\"d-flex flex-column justify-content-center align-items-center\">\n            <h4>Found {foundTracks.length} Tracks from {uniqueAlbumCovers.length} albums</h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"d-flex flex-column min-vh-100\">\n            <Row className=\"g-0\">\n              {uniqueAlbumCovers.map((t, idx) => {\n                return <Col key={idx} className=\"flex-grow-0\">\n                  <Image src={t.albumArtUrl(50)}/>\n                </Col>\n              })}\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col>\n        <Row>\n          <Col className=\"d-flex flex-column justify-content-center align-items-center\">\n            <h4>Missing {notFoundTracks.length} Tracks</h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"d-flex flex-column min-vh-100\">\n            <ul>\n              {notFoundTracks.map((t, i) => {\n                return <li key={i}>{t.track.Name} - {t.track.Album} - {t.track.Artist}</li>\n              })}\n            </ul>\n          </Col>\n        </Row>\n      </Col>\n      {/*<Col className=\"d-flex flex-column min-vh-100 justify-content-center align-items-center\">*/}\n      {/*  <h4>Missing {notFoundTracks.length} Tracks</h4>*/}\n      {/*  <ul>*/}\n      {/*    {notFoundTracks.map((t, i) => <li key={i}>{t.track.Name} - {t.track.Album} - {t.track.Artist}</li>)}*/}\n      {/*  </ul>*/}\n      {/*</Col>*/}\n    </Row>\n  </div>\n}\n\nexport default LibraryDisplay\n","import MusicKitInstance = MusicKit.MusicKitInstance\nimport {Sema, RateLimit} from \"async-sema\"\nimport {LibraryTrack} from \"./LibraryUpload\"\nimport {Dispatch, SetStateAction} from \"react\"\n\nexport class FoundTrack {\n  track: LibraryTrack\n  trackId: string\n  albumArt: string\n\n  constructor(track: LibraryTrack, trackId: string, albumArt: string) {\n    this.track = track\n    this.trackId = trackId\n    this.albumArt = albumArt\n  }\n\n  albumArtUrl(size: number): string {\n    return this.albumArt.replace('{w}', size.toString()).replace('{h}', size.toString())\n  }\n}\n\nexport class NotFoundTrack {\n  track: LibraryTrack\n\n  constructor(track: LibraryTrack) {\n    this.track = track\n  }\n}\n\n// Result type from Apple Music\ninterface TrackResource {\n  id: string\n  attributes: {\n    name: string\n    artwork: {\n      url: string\n    }\n  }\n}\n\ntype SearchResult = FoundTrack | NotFoundTrack;\n\n\nclass SearchManager {\n  readonly musicKit: MusicKitInstance\n  readonly library: LibraryTrack[]\n\n  private readonly searchSemaphore: Sema\n  private readonly addRateLimit: (() => Promise<void>)\n  private readonly cache: Record<string, SearchResult>\n\n  constructor(musicKit: MusicKitInstance, library: LibraryTrack[]) {\n    this.musicKit = musicKit\n    this.searchSemaphore = new Sema(10)\n    // 1 request every 4 seconds... Apple music is lame.\n    this.addRateLimit = RateLimit(0.4, {\n      timeUnit: 1000,\n      uniformDistribution: true,\n    })\n    this.library = library\n    this.cache = {}\n  }\n\n  async import(ids: string[]) {\n    await this.addRateLimit()\n    await this.musicKit.api.addToLibrary({songs: ids})\n  }\n\n  async startSearching(foundCallback: Dispatch<SetStateAction<FoundTrack[]>>, notFoundCallback: Dispatch<SetStateAction<NotFoundTrack[]>>) {\n    foundCallback([])\n    notFoundCallback([])\n\n    const promises = this.library.map((track) => {\n      return this.search(track).then(\n        (trackResult) => {\n          if (trackResult instanceof FoundTrack) {\n            foundCallback((prev) => [...prev, trackResult])\n          } else {\n            notFoundCallback((prev) => [...prev, trackResult])\n          }\n        }\n      )\n    })\n    await Promise.all(promises)\n  }\n\n  private async search(track: LibraryTrack): Promise<SearchResult> {\n    if (track.LibraryId in this.cache) {\n      return this.cache[track.LibraryId]\n    }\n\n    const token = await this.searchSemaphore.acquire()\n    try {\n      const searches = [\n        `${track.Name} - ${track.Album} - ${track.Artist}`,\n        `${track.Name} -  ${track.Artist}`\n      ]\n      for (const search of searches) {\n        const result = await this.doSearch(search, track)\n        if (result != null) {\n          this.cache[track.LibraryId] = result\n          return result\n        }\n      }\n      const result = new NotFoundTrack(track)\n      this.cache[track.LibraryId] = result\n      return result\n    } finally {\n      await this.searchSemaphore.release(token)\n    }\n  }\n\n  private async doSearch(searchString: string, track: LibraryTrack): Promise<FoundTrack | null> {\n    const apiResult = await this.musicKit.api.search(searchString) as unknown\n    const result = apiResult as { songs: { data: TrackResource[] } }\n    if (!result.songs) {\n      // Not found!\n      return null\n    } else {\n      const artwork = result.songs.data[0].attributes.artwork.url\n      const trackId = result.songs.data[0].id\n      return new FoundTrack(track, trackId, artwork)\n    }\n  }\n}\n\nexport default SearchManager\n","import React, {useState} from 'react'\n\nimport {Alert, Col, Form, Row, Spinner} from \"react-bootstrap\"\nimport {parse} from \"plist\"\nimport MusicKitInstance = MusicKit.MusicKitInstance\nimport LibraryDisplay from \"./LibraryDisplay\"\nimport SearchManager from \"./Searcher\"\n\ninterface AppProps {\n  musicKitInstance: MusicKitInstance;\n}\n\n// Example:\n// {\n//   \"Track ID\": 3003,\n//   \"Name\": \"Waveforms\",\n//   \"Artist\": \"Logistics\",\n//   \"Album Artist\": \"Logistics\",\n//   \"Composer\": \"Matthew Gresham & Emile Bani\",\n//   \"Album\": \"Waveforms - EP\",\n//   \"Genre\": \"Dance\",\n//   \"Kind\": \"Apple Music AAC audio file\",\n//   \"Size\": 8462492,\n//   \"Total Time\": 242229,\n//   \"Disc Number\": 1,\n//   \"Disc Count\": 1,\n//   \"Track Number\": 1,\n//   \"Track Count\": 4,\n//   \"Year\": 2019,\n//   \"Date Modified\": \"2019-09-17T23:00:13.000Z\",\n//   \"Date Added\": \"2019-09-17T23:50:49.000Z\",\n//   \"Bit Rate\": 256,\n//   \"Sample Rate\": 44100,\n//   \"Play Count\": 9,\n//   \"Play Date\": 3714639707,\n//   \"Play Date UTC\": \"2021-09-16T11:21:47.000Z\",\n//   \"Release Date\": \"2019-09-13T12:00:00.000Z\",\n//   \"Artwork Count\": 1,\n//   \"Sort Album\": \"Waveforms - EP\",\n//   \"Sort Artist\": \"Logistics\",\n//   \"Sort Name\": \"Waveforms\",\n//   \"Persistent ID\": \"6AE154C15569FA6A\",\n//   \"Track Type\": \"Remote\",\n//   \"Apple Music\": true\n// }\n\nexport interface LibraryTrack {\n  LibraryId: string\n  Artist: string\n  Name: string\n  Album: string\n}\n\ninterface Library {\n  Tracks: Record<number, Record<string, string>>\n}\n\n\nasync function handleUpload(e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): Promise<LibraryTrack[] | null> {\n  let file = null\n  if ('files' in e.currentTarget) {\n    file = e.currentTarget.files?.[0]\n  }\n  if (!file) return null\n\n  const text = await file.text()\n  const library_contents = (parse(text) as unknown) as Library\n  return Object.values(library_contents.Tracks).map((t) => {\n    return {\n      LibraryId: t[\"Track ID\"],\n      Artist: t[\"Artist\"],\n      Name: t[\"Name\"],\n      Album: t[\"Album\"]\n    }\n  })\n}\n\n\nfunction LibraryUpload({musicKitInstance}: AppProps) {\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [library, setLibrary] = useState<LibraryTrack[] | null>(null)\n\n  function onUpload(e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    setIsLoading(true)\n    setError(null)\n    handleUpload(e)\n      .then((library) => setLibrary(library))\n      .catch((e) => setError(e))\n      .finally(() => setIsLoading(false))\n  }\n\n  if (library != null && !isLoading && !error) {\n    const manager = new SearchManager(musicKitInstance, library)\n    return <LibraryDisplay musicKitInstance={musicKitInstance} searchManager={manager}/>\n  }\n\n  return (\n    <Row>\n      <Col className=\"d-flex flex-column min-vh-100 justify-content-center align-items-center\">\n        <h1>Upload your library.xml file</h1>\n        <p>The file never leaves your browser, and this app is programmed not to judge your taste in music.</p>\n        {isLoading\n          ? <div><Spinner animation=\"border\" role=\"status\"/></div>\n          : <div>\n            {error != null && <Alert variant=\"danger\">\n              <Alert.Heading>Error parsing library file - are you sure this is an Apple music library.xml\n                file?</Alert.Heading>\n              <p>The Error thrown was: {error.toString()}</p>\n            </Alert>}\n            <Form.Group controlId=\"formFile\" className=\"mb-3\">\n              <Form.Control type=\"file\" onChange={onUpload}/>\n            </Form.Group>\n          </div>\n        }\n      </Col>\n    </Row>\n  )\n}\n\nexport default LibraryUpload\n","import React, {useState} from 'react'\n\nimport MusicKitInstance = MusicKit.MusicKitInstance\nimport Login from \"./Login\"\nimport LibraryUpload from \"./LibraryUpload\"\n\ninterface AppProps {\n  musicKitInstance: MusicKitInstance;\n}\n\nfunction App({musicKitInstance}: AppProps) {\n  const [signedIn, setSignedIn] = useState(musicKitInstance.isAuthorized)\n\n  const signIn = () => {\n    musicKitInstance.authorize().then(r => setSignedIn(true))\n  }\n\n  if (!signedIn) {\n    return <Login callback={signIn}/>\n  } else {\n    return <LibraryUpload musicKitInstance={musicKitInstance}/>\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport {Container, Nav, Navbar} from \"react-bootstrap\"\n\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://5e5a8ce1c7a24928a5f2e484accee607@o1083910.ingest.sentry.io/6093765\",\n  integrations: [new Integrations.BrowserTracing()],\n  tracesSampleRate: 1.0,\n});\n\nconst musicKitInstance = MusicKit.configure({\n  developerToken: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IloyTDRWRFpXRFAifQ.eyJpc3MiOiJEQVQ1VU1aWU03IiwiaWF0IjoxNjM4NjYzNTk2LCJleHAiOjE2NTE2MTk5OTZ9.9iCTRy0hmCvT52tzcJMKhI8oiZoJWiC_pxuI0U3TZk01e5nmAc8E5WAqprOafk2wH9pLEM0M6jhVf6Ic0V-PoA\",\n  app: {\n    name: \"Library.xml importer\",\n    icon: process.env.PUBLIC_URL + '/logo192.png'\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container fluid>\n      <App musicKitInstance={musicKitInstance}/>\n    </Container>\n    <Navbar color=\"dark\" fixed=\"bottom\">\n      <Container>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav>\n            <Nav.Link target=\"blank\" href=\"https://tomforb.es\">Made by Tom Forbes</Nav.Link>\n            <Nav.Link target=\"blank\" href=\"https://github.com/orf/apple-music-importer\">Source Code</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}